import numpy as np
from scipy.spatial.distance import directed_hausdorff
import similaritymeasures
from scipy.ndimage import gaussian_filter1d

class Signal:

	def __init__( self ):
		return

	def __del__( self ):
		return

	# preprocess data
	def preprocess_data( self, data_ia ):
		data_oa = data_ia - np.mean(data_ia)
		# data_oa = data_ia - np.mean(data_ia) / np.std(data_ia)
		return gaussian_filter1d( data_oa, 2)

	def rmse(self, predictions, targets):
		differences = predictions - targets                       #the DIFFERENCEs.
		differences_squared = differences ** 2                    #the SQUAREs of ^
		mean_of_differences_squared = differences_squared.mean()  #the MEAN of ^
		rmse_val = np.sqrt(mean_of_differences_squared)           #ROOT of ^
		return rmse_val          


	def get_similarity( self, data_list_1_ia, data_list_2_ia, method_ia="frechet_dist" ):
		
		# Methods available = "frechet_dist", "dtw", "directed_hausdorff", "rmse"
		
		p_data_list_1 = self.preprocess_data( data_list_1_ia)
		p_data_list_2 = self.preprocess_data( data_list_2_ia)

		data_s = [1 for i in range(0,len(p_data_list_1))]
		
		x_ = np.array([np.array(p_data_list_1), np.array(data_s)]).T
		y_ = np.array([np.array(p_data_list_2), np.array(data_s)]).T


		if method_ia is "frechet_dist":
			return similaritymeasures.frechet_dist(x_, y_)

		elif method_ia is "dtw":
			return similaritymeasures.dtw( x_, y_)[0]

		elif method_ia is "directed_hausdorff":
			return directed_hausdorff( x_, y_)[0]

		elif method_ia is "rmse":
			return self.rmse( x_, y_)

		else:
			print(" Please select valid method ")
			return -1


if __name__ == "__main__":

	data_1 = [18.821170641647843, 161.10587833160298, 164.2881442988193, 165.67572049840518, 164.65797706671083, 158.7243965611936, 162.6311131128438, 162.75829252942532, 162.75507408473905, 162.41944794492787, 156.7563336810374, 158.10327817679058, 158.980143334048, 162.3971385602316, 162.06278575013502, 164.30085982946935, 164.90448305999158, 158.77616410428527, 158.3602094533057, 157.58919276300486, 156.35265844587283, 156.22137342040426, 156.64587475155528, 156.5978207276323, 162.14750504043212, 156.20401652017932, 157.05897473345934, 162.21096846380024, 162.08801217049609, 162.55118362191809, 162.5716906339306, 162.6071668714139, 162.77158304934815, 162.68419258691534, 162.5452890739847, 162.33298815921242, 162.77414879843872, 162.56872344625887, 162.5888830312955, 162.41600490678871, 162.65516690245389, 157.0325908430118, 156.90301899193497, 151.85230038271882, 163.25235247751513, 158.06631016860086, 157.86735669839723, 157.99729309723503, 151.6837553930522, 151.86719889681856, 151.72544406583893, 151.81808439175734, 152.3178194969676, 152.37174937901273, 152.3086663279742, 152.10259677131756, 158.1830369087465, 158.28437617593252, 152.0187665276223, 157.9356415409161, 158.05933280061237, 162.2885388390561, 162.82290903303922, 162.69034678626102, 162.33364409845512, 162.87546312560352, 162.46722620890478, 162.75623381163493, 162.5203139733278, 162.4032426225358, 161.66709810112707, 162.04728756402474, 162.47545725930175, 162.95715636517818, 162.20064782938593, 162.56789406236246, 162.7374183440731, 157.1578021838066, 157.02267644665136, 162.54567107255232, 162.93468681117128, 162.89721437306216, 162.82272169446634, 162.30933374314557, 162.06160748770995, 162.24930329350343, 163.06773742120043, 162.83770813999251, 163.48115650335887, 164.43480757464428, 165.12552238397268, 164.69613704149097, 164.15958353217667, 164.40308754327302, 164.22412935030343, 164.10771955812478, 163.90386675261144, 163.8462076866642, 163.6877464097388, 164.4052613742369, 163.98657726458003, 164.0146245743803, 164.01972624519001, 164.10878426812127, 163.63484775197108, 164.13964240698238, 164.05981993652063, 164.23794514459644, 164.495028141135, 164.1184066522615, 163.88145281055998, 164.52347201514465, 164.16197477736188, 164.3109248575625, 164.2119069364844, 164.67050349854185, 164.35582937716353, 164.26913356103165, 163.47725083602322, 164.4464903317269, 164.40785221334866, 163.7826315902616, 163.7107908865113, 163.75176069839844, 164.19785278446687, 163.33578760106036, 163.16411973935365, 163.50609967482637, 163.74433014388114, 164.02013097678528, 164.9457938411118, 165.53121393861218, 164.54139255806098, 163.91568060088525, 164.24944264056376, 163.58716297877302, 163.17999864849847, 163.28647032140205, 163.904867207709, 164.8377632464573, 165.11003790452068, 166.0941605766882, 166.6166770414894, 166.725892284424, 166.5018890855732, 165.91759913074094, 166.20077292636495, 166.353943472591, 166.49912994098722, 166.5592000356466, 166.42603162689164, 166.3475553482704, 165.4497062797654, 165.58105874932588, 164.87927965596154, 165.59405554645826, 165.9610652234314, 164.83708703054555, 164.2331015672971, 164.3049281006081, 164.67860937557623, 165.2965953523811, 159.94625109219348, 160.0565017144816, 160.2471840330298, 160.17416153447425, 160.40084143859391, 160.29644281780543, 165.8686839251716]
	data_2 = [3.6062118225514133, 177.19995572003756, 168.05465662149473, 167.48615274023203, 164.77211958524995, 164.20430630029233, 163.7758972697466, 171.55505804432227, 172.51266294316355, 171.81822860769543, 170.77432558883436, 170.7889304945334, 170.92133837553368, 171.76322673090166, 172.0759553515441, 172.45239690655907, 171.79424134153686, 172.12844818480025, 163.03049228314768, 171.71758368033832, 171.24849842629482, 170.95016042661902, 164.00450541259752, 171.11196843814835, 164.25525269324348, 161.9483467406492, 172.2536206479867, 164.60482220321822, 162.28332608112132, 172.67143481263287, 172.37087312983272, 162.67586654406418, 173.7057879976315, 160.93744567659323, 172.18699346535433, 172.79152397667295, 172.98062135107577, 172.06321709878327, 172.43255879680777, 172.55074433460982, 173.71329527203733, 173.67761887141063, 173.9659605055244, 173.8024318319555, 174.39535185403383, 174.1846138410882, 173.8346064592442, 173.8553011145492, 160.44286227190068, 173.72411670957118, 173.82842609188597, 173.86550216167615, 160.63568138390988, 174.46529854094342, 173.9487416661605, 173.9045924009841, 173.66732412442835, 173.99298470146488, 173.60593242259446, 174.63989090047465, 173.65631836625568, 172.8735213369521, 172.37404518946943, 172.16041627708242, 171.49306784236504, 172.08632281588885, 172.0777687122808, 172.23811093335758, 172.11464389310038, 172.05868700498183, 171.3244340331197, 172.34719210681084, 171.87066431195893, 172.0888212619121, 171.9441854238513, 165.03347455849237, 171.97519648881675, 171.5649788565015, 171.95251512219573, 171.973173072665, 172.86987468177045, 160.26162736182053, 159.99592380391454, 171.71418120666104, 164.15604892192601, 159.61385631042324, 160.15574064051725, 172.40501174845195, 160.7486936407806, 160.72760103651726, 159.0507780240133, 171.28394887598702, 171.42388521827195, 171.7806194237906, 171.7725568791772, 171.51829216785518, 171.38943281313425, 171.10125267553096, 171.39679809102566, 172.0606683467454, 172.58924448102, 172.4707419457992, 172.86666416659622, 172.6722453884689, 172.5468619311572, 172.57950858720488, 172.53309698701753, 172.48212168378302, 172.4422655978772, 172.41367148174967, 172.1666185141304, 172.0511074282832, 171.73971605796123, 171.59046032430882, 171.44869624694823, 171.36873782374, 171.22323612269554, 171.3649123934444, 171.77948646613632, 171.60196845295266, 171.68643261186307, 171.01879929832782, 171.49402446071912, 171.54222654403483, 172.66489914460394, 172.8743842270459, 173.59803384257626, 173.891051767376, 174.1149190467252, 174.21711660925425, 172.24743356410505, 172.29432001183375, 171.96974893904127, 171.34810496916023, 171.52824591056068, 170.83947639879068, 170.97776786927133, 171.44452881771716, 171.72150225329997, 172.09535169075735, 171.82069849522293, 171.19751342302808, 171.2517720792761, 171.45946167684102, 170.97504782039005, 170.14814561540206, 164.46690594086513, 170.31017747616332, 170.8053601794626, 170.3739214972267, 170.74629097821236, 169.88261073961496, 169.47473602712432, 169.886940374047, 169.65894517617286, 170.27973244199327, 169.70426280680454, 170.71604349750353, 169.9171716373153, 171.83731122838253, 173.12867318954895, 173.44454822849224, 172.86682189866184, 166.14759910016093, 173.43595959964063, 172.65313269528167, 166.21553285471143, 166.5035501253719, 172.61320910474848]

	signal = Signal()
	si = signal.get_similarity( data_1, data_2)
	print( "similarity measures = ", si)